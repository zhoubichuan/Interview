(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{519:function(a,e,t){"use strict";t.r(e);var s=t(20),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"七-webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-webpack"}},[a._v("#")]),a._v(" 七.webpack")]),a._v(" "),t("h2",{attrs:{id:"_1-webpack-打包文件体积过大-最终打包成一个-js-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack-打包文件体积过大-最终打包成一个-js-文件"}},[a._v("#")]),a._v(" 1.webpack 打包文件体积过大？（最终打包成一个 js 文件）")]),a._v(" "),t("ul",[t("li",[a._v("1.异步加载模块")]),a._v(" "),t("li",[a._v("2.提取第三库")]),a._v(" "),t("li",[a._v("3.代码压缩")]),a._v(" "),t("li",[a._v("4.去除不必要的插件")])]),a._v(" "),t("h3",{attrs:{id:"如何优化-webpack-构建的性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何优化-webpack-构建的性能"}},[a._v("#")]),a._v(" 如何优化 webpack 构建的性能")]),a._v(" "),t("ul",[t("li",[a._v("1.异步加载模块")]),a._v(" "),t("li",[a._v("2.提取第三库")]),a._v(" "),t("li",[a._v("3.代码压缩")]),a._v(" "),t("li",[a._v("4.去除不必要的插件")])]),a._v(" "),t("ul",[t("li",[a._v("如何优化 webpack 构建的性能\n"),t("ul",[t("li",[a._v("1.减少代码体积\n"),t("ul",[t("li",[a._v("1.使用 CommonsChunksPlugin 提取多个 chunk 之间的通用模块，减少总体代码体积")]),a._v(" "),t("li",[a._v("2.把部分依赖转移到 cnd 上，避免每次编译过程都由 webpack 处理，")]),a._v(" "),t("li",[a._v("3.对一些组件库采用按需加载，避免无用的代码")])])]),a._v(" "),t("li",[a._v("2.减少目录检索范围\n"),t("ul",[t("li",[a._v("在使用 loader 的时候，通过制定 exclude 和 include 选项，减少 loader 遍历的目录范围，从而加快 webpack 编译速度")])])]),a._v(" "),t("li",[a._v("3.减少检索路径\n"),t("ul",[t("li",[a._v("resolve.alias 可以配置 webpack 模块解析的别名，对于比较深的解析路径，可以对其配置 alias")])])])])])]),a._v(" "),t("p",[a._v("当系统面临大量用户访问，负载过高的时候，通常会使用增加服务器数量来进行横向扩展，使用集群和负载均衡提高整个系统的处理能力")]),a._v(" "),t("p",[a._v("我们把开发中的所有资源（图片、js、css）都看成模块，通过 loader 和 plugins 来对资源进行处理，打包成符合生成环节部署的前端资源")]),a._v(" "),t("h2",{attrs:{id:"_8-webpack-性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-webpack-性能优化"}},[a._v("#")]),a._v(" 8.Webpack 性能优化")]),a._v(" "),t("h4",{attrs:{id:"_1-减少-webpack-打包时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-减少-webpack-打包时间"}},[a._v("#")]),a._v(" 1.减少 webpack 打包时间")]),a._v(" "),t("ul",[t("li",[a._v("优化 loader 的文件搜索范围，将 babel 编译过的文件缓存起来")])]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("loader")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"babel-loader?cacheDirectory=true"')]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_2-happypack-将-loader-的同步执行转换为并行的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-happypack-将-loader-的同步执行转换为并行的"}},[a._v("#")]),a._v(" 2.happyPack:将 loader 的同步执行转换为并行的")]),a._v(" "),t("h4",{attrs:{id:"_3-dllpulgin-可以将特定的类库提前打包然后引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-dllpulgin-可以将特定的类库提前打包然后引入"}},[a._v("#")]),a._v(" 3.DllPulgin:可以将特定的类库提前打包然后引入")]),a._v(" "),t("h4",{attrs:{id:"_4-代码压缩-mode-为-production-默认开启代码压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码压缩-mode-为-production-默认开启代码压缩"}},[a._v("#")]),a._v(" 4.代码压缩：mode 为 production 默认开启代码压缩")]),a._v(" "),t("h4",{attrs:{id:"_5-tree-shaking-删除项目中未被引用的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-tree-shaking-删除项目中未被引用的代码"}},[a._v("#")]),a._v(" 5.tree shaking：删除项目中未被引用的代码")]),a._v(" "),t("h2",{attrs:{id:"有没有去研究-webpack-的一些原理和机制-怎么实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有没有去研究-webpack-的一些原理和机制-怎么实现的"}},[a._v("#")]),a._v(" 有没有去研究 webpack 的一些原理和机制，怎么实现的")]),a._v(" "),t("ul",[t("li",[a._v("解析 webpack 配置参数，合并从 shell 传入和 webpack.config.js 文件里配置的参数，生产最后的配置结果。")]),a._v(" "),t("li",[a._v("注册所有配置的插件，好让插件监听 webpack 构建生命周期的事件节点，以做出对应的反应。")]),a._v(" "),t("li",[a._v("从配置的 entry 入口文件开始解析文件构建 AST 语法树，找出每个文件所依赖的文件，递归下去。")]),a._v(" "),t("li",[a._v("在解析文件递归的过程中根据文件类型和 loader 配置找出合适的 loader 用来对文件进行转换。")]),a._v(" "),t("li",[a._v("递归完后得到每个文件的最终结果，根据 entry 配置生成代码块 chunk。")]),a._v(" "),t("li",[a._v("输出所有 chunk 到文件系统。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);