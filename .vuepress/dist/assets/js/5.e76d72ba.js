(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{141:function(n,e,t){"use strict";t.r(e);var i=t(0),a=Object(i.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[[e("div",{staticClass:"cont"},[e("div",{staticClass:"large-header",attrs:{id:"large-header"}})])],this._v(" "),e("script",[this._v("\n// import data from './data.json'\n    export default {\n        data() {\n            return {\n                dataList:data\n            }\n        },\n        mounted() {\n            this.animationFrame()\n            this.init()\n        },\n        methods: {\n            animationFrame() {\n                var lastTime = 0;\n                var vendors = ['ms', 'moz', 'webkit', 'o'];\n                for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                    window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n                    window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']\n                        || window[vendors[x]+'CancelRequestAnimationFrame'];\n                }\n<pre><code>            if (!window.requestAnimationFrame) {\n                window.requestAnimationFrame = function(callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                };\n            }\n\n            if (!window.cancelAnimationFrame) {\n                window.cancelAnimationFrame = function(id) {\n                    clearTimeout(id);\n                };\n            }\n        },\n        init() {\n            var width, height, largeHeader, canvas, ctx, circles, target, animateHeader = true;\n\n            // Main\n            initHeader();\n            addListeners();\n\n            function initHeader() {\n                width = window.innerWidth;\n                height = document.documentElement.clientHeight / 2\n                // height = window.innerHeight / 2;\n                target = {x: 0, y: height};\n\n                largeHeader = document.getElementById('large-header');\n                largeHeader.style.height = height+'px';\n\n                canvas = document.getElementById('cvs');\n                canvas.width = width;\n                canvas.height = height;\n                ctx = canvas.getContext('2d');\n\n                // create particles\n                circles = [];\n                for(var x = 0; x &lt; width*0.5; x++) {\n                    var c = new Circle();\n                    circles.push(c);\n                }\n                animate();\n            }\n\n            // Event handling\n            function addListeners() {\n                window.addEventListener('scroll', scrollCheck);\n                window.addEventListener('resize', resize);\n            }\n\n            function scrollCheck() {\n                if(document.body.scrollTop &gt; height) animateHeader = false;\n                else animateHeader = true;\n            }\n\n            function resize() {\n                width = window.innerWidth;\n                height = document.documentElement.clientHeight / 2;\n                largeHeader.style.height = height+'px';\n                canvas.width = width;\n                canvas.height = height;\n            }\n\n            function animate() {\n                if(animateHeader) {\n                    ctx.clearRect(0,0,width,height);\n                    for(var i in circles) {\n                        circles[i].draw();\n                    }\n                }\n                requestAnimationFrame(animate);\n            }\n\n            // Canvas manipulation\n            function Circle() {\n                var _this = this;\n\n                // constructor\n                (function() {\n                    _this.pos = {};\n                    init();\n                })();\n\n                function init() {\n                    _this.pos.x = Math.random()*width;\n                    _this.pos.y = height+Math.random()*100;\n                    _this.alpha = 0.1+Math.random()*0.3;\n                    _this.scale = 0.1+Math.random()*0.3;\n                    _this.velocity = Math.random();\n                }\n\n                this.draw = function() {\n                    if(_this.alpha &lt;= 0) {\n                        init();\n                    }\n                    _this.pos.y -= _this.velocity;\n                    _this.alpha -= 0.0005;\n                    ctx.beginPath();\n                    ctx.arc(_this.pos.x, _this.pos.y, _this.scale*10, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = 'rgba(255,255,255,'+ _this.alpha+')';\n                    ctx.fill();\n                };\n            }\n        }\n    }\n}\n</code></pre>\n")])],2)}),[],!1,null,null,null);e.default=a.exports}}]);